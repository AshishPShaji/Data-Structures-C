#include <stdio.h>
#include <stdlib.h>

// Define the structure of a node
struct Node {
    int data;
    struct Node* left;
    struct Node* right;
};

// Function to create a new node
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;
    return newNode;
}

// Function to insert nodes in the tree (for simplicity, we insert in level order)
struct Node* insertLevelOrder(int data, struct Node* root, int* index, int n) {
    if (*index >= n)
        return root;

    struct Node* newNode = createNode(data);
    if (root == NULL) {
        root = newNode;
    } else {
        struct Node* temp = root;
        struct Node* parent;
        char direction;

        while (temp != NULL) {
            parent = temp;
            printf("Insert %d as left or right child of %d (l/r): ", data, temp->data);
            scanf(" %c", &direction);

            if (direction == 'l') {
                temp = temp->left;
                if (temp == NULL) {
                    parent->left = newNode;
                }
            } else if (direction == 'r') {
                temp = temp->right;
                if (temp == NULL) {
                    parent->right = newNode;
                }
            }
        }
    }
    (*index)++;
    return root;
}

// Function to perform inorder traversal
void inorderTraversal(struct Node* root) {
    if (root == NULL)
        return;
    inorderTraversal(root->left);
    printf("%d ", root->data);
    inorderTraversal(root->right);
}

// Function to perform preorder traversal
void preorderTraversal(struct Node* root) {
    if (root == NULL)
        return;
    printf("%d ", root->data);
    preorderTraversal(root->left);
    preorderTraversal(root->right);
}

// Function to perform postorder traversal
void postorderTraversal(struct Node* root) {
    if (root == NULL)
        return;
    postorderTraversal(root->left);
    postorderTraversal(root->right);
    printf("%d ", root->data);
}

int main() {
    struct Node* root = NULL;
    int n, data, index = 0;

    printf("Enter the number of nodes: ");
    scanf("%d", &n);

    for (int i = 0; i < n; i++) {
        printf("Enter data for node %d: ", i + 1);
        scanf("%d", &data);
        root = insertLevelOrder(data, root, &index, n);
    }

    printf("\nInorder Traversal: ");
    inorderTraversal(root);
    printf("\n");

    printf("Preorder Traversal: ");
    preorderTraversal(root);
    printf("\n");

    printf("Postorder Traversal: ");
    postorderTraversal(root);
    printf("\n");

    return 0;
}
